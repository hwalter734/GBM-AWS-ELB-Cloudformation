Description: This template deploys a VPC, with a pair of public subnets spread
  across two Availability Zones. It deploys an internet gateway, with a default
  route on the public subnets. It deploys a pair of NAT gateways (one in each AZ).

Parameters:
  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro
      - t3.micro
    ConstraintDescription: must be a valid EC2 instance type.

  Instance1Name:
    Description: Please enter the desired name of the first instance
    Type: String
    Default: testinginstance1

  Instance2Name:
    Description: Please enter the desired name of the second instance
    Type: String
    Default: testinginstance2

  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: Must be the name of an existing EC2 KeyPair.
    Default: protokey

  AmiId:
    Type: String
    Default: ami-09d8b5222f2b93bf0

  VpcName:
    Description: Please enter the desired name of the VPC
    Type: String
    Default: example1

  IgwName:
    Description: Please enter the desired name of the internet gateway
    Type: String
    Default: igw_example1

  RouteTableName:
    Description: Please enter the desired name of the route table
    Type: String
    Default: rtb_example1

  PublicSubnet1Az:
    Description: Please enter the desired availability zone of the first EC2 instance
    Type: String
    Default: us-east-1a

  PublicSubnet1AzName:
    Description: Please enter the desired name of the subnet located in the first availability zone
    Type: String
    Default: us-east-1-1a

  PublicSubnet2Az:
    Description: Please enter the desired availability zone of the second EC2 instance
    Type: String
    Default: us-east-1b

  PublicSubnet2AzName:
    Description: Please enter the desired name of the second subnet located in the second availability zone
    Type: String
    Default: us-east-1-1b

  InstanceSecurityGroupName:
    Description: Please enter the desired name of the instance security group
    Type: String
    Default: sg_example1

  ElbSecurityGroupName:
    Description: Please enter the desired name of the instance security group
    Type: String
    Default: sg_example2

  TargetGroupName:
    Description: Please enter the desired name of the target group
    Type: String
    Default: tg_example1

  TargetGroupProtocol:
    Description: Please enter the desired protocol of the target group
    Type: String
    Default: HTTP

  TargetGroupPort:
    Description: Please enter the desired port of the target group
    Type: String
    Default: 80

  ElbName:
    Description: Please enter the desired name of the elastic load balancer
    Type: String
    Default: elb-example1

  ElbProtocol:
    Description: Please enter the desired protocol of the elastic load balancer
    Type: String
    Default: HTTP

  ElbPort:
    Description: Please enter the desired port of the elastic load balancer
    Type: String
    Default: 80

  ElbProtocolType:
    Description: Please enter the desired protocol type of the elastic load balancer
    Type: String
    Default: forward

  VpcCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 12.0.0.0/16

  PublicSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
    Type: String
    Default: 12.0.1.0/24

  PublicSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the second Availability Zone
    Type: String
    Default: 12.0.2.0/24

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Ref VpcName

  IGW:
    Type: AWS::EC2::InternetGateway
    DependsOn: VPC
    Properties:
      Tags:
        - Key: Name
          Value: !Ref IgwName
        - Key: Network
          Value: Public

  EIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NatGW:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
          - EIP
          - AllocationId
      SubnetId: !Ref PublicSubnet1

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref IGW
      VpcId: !Ref VPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
      AvailabilityZone: !Ref PublicSubnet1Az
      CidrBlock: !Ref PublicSubnet1CIDR
      Tags:
        - Key: Name
          Value: !Ref PublicSubnet1AzName

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
      AvailabilityZone: !Ref PublicSubnet2Az
      CidrBlock: !Ref PublicSubnet2CIDR
      Tags:
        - Key: Name
          Value: !Ref PublicSubnet2AzName

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Ref RouteTableName

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref IGW

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Ref InstanceSecurityGroupName
      GroupDescription: Enable SSH access and HTTP
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref ElbSecurityGroup

  ElbSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Ref ElbSecurityGroupName
      GroupDescription: Enable SSH access and HTTP
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  ElbTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Ref TargetGroupName
      HealthCheckIntervalSeconds: 30
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 15
      HealthyThresholdCount: 5
      Matcher:
        HttpCode: '200'
      Protocol: !Ref TargetGroupProtocol
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '20'
      Port: !Ref TargetGroupPort
      VpcId: !Ref VPC
      TargetType: instance
      Targets:
        - Id: !Ref EC2Instance1
          Port: 80
        - Id: !Ref EC2Instance2
          Port: 80

  ElasticLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Ref ElbName
      Type: application
      Scheme: internet-facing
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref ElbSecurityGroup

  ElasticLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ElasticLoadBalancer
      DefaultActions:
        - Type: !Ref ElbProtocolType
          TargetGroupArn: !Ref ElbTargetGroup
      Port: !Ref ElbPort
      Protocol: !Ref ElbProtocol

  EC2Instance1:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      ImageId: !Ref AmiId
      KeyName: !Ref KeyName
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: '0'
          SubnetId: !Ref PublicSubnet1
          GroupSet:
            - !Ref InstanceSecurityGroup
      UserData:
        Fn::Base64:
          !Sub |
          #!/bin/bash
          sudo yum -y update
          sudo yum install unzip -y
          sudo yum install httpd -y
          sudo yum install wget -y
          sudo service httpd start
          INSTANCEIP=$(curl http://checkip.amazonaws.com)
          cd /var/www && wget https://github.com/hwalter734/GBM-AWS-ELB-Cloudformation/raw/main/html.zip && unzip html.zip && chmod 0755 html
          sed -i "s/HOSTIP/$INSTANCEIP/g" index.html
      Tags:
        - Key: Name
          Value: !Ref Instance1Name

  EC2Instance2:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      ImageId: !Ref AmiId
      KeyName: !Ref KeyName
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: '0'
          SubnetId: !Ref PublicSubnet2
          GroupSet:
            - !Ref InstanceSecurityGroup
      UserData:
        Fn::Base64:
          !Sub |
          #!/bin/bash
          sudo yum -y update
          sudo yum install unzip -y
          sudo yum install httpd -y
          sudo yum install wget -y
          sudo service httpd start
          INSTANCEIP=$(curl http://checkip.amazonaws.com)
          cd /var/www && wget https://github.com/hwalter734/GBM-AWS-ELB-Cloudformation/raw/main/html.zip && unzip html.zip && chmod 0755 html
          sed -i "s/HOSTIP/$INSTANCEIP/g" index.html
      Tags:
        - Key: Name
          Value: !Ref Instance2Name

Outputs:
  VPC:
    Description: A reference to the created VPC
    Value: !Ref VPC

  IGW:
    Description: Internet gateway for application
    Value: !Ref IGW

  EIP:
    Description: Elastic IP for demo
    Value: !Ref EIP

  NatGW:
    Description: Nat gateway for subnet
    Value: !Ref NatGW

  VPCGatewayAttachment:
    Description: Internet gateway attachment for application
    Value: !Ref VPCGatewayAttachment

  PublicRouteTable:
    Description: Internet gateway attachment for application
    Value: !Ref PublicRouteTable

  DefaultPublicRoute:
    Description: Default public route
    Value: !Ref DefaultPublicRoute

  PublicSubnet1RouteTableAssociation:
    Description: Associate subnet one with route table
    Value: !Ref PublicSubnet1RouteTableAssociation

  PublicSubnet2RouteTableAssociation:
    Description: Associate subnet two with route table
    Value: !Ref PublicSubnet2RouteTableAssociation

  PublicSubnet1:
    Description: A reference to the public subnet in the 1st Availability Zone
    Value: !Ref PublicSubnet1

  PublicSubnet2:
    Description: A reference to the public subnet in the 2nd Availability Zone
    Value: !Ref PublicSubnet2

  InstanceSecurityGroup:
    Description: Security group for instances
    Value: !Ref InstanceSecurityGroup

  ElbTargetGroup:
    Description: Target group for elastic load balancer
    Value: !Ref ElbTargetGroup

  ElasticLoadBalancerListener:
    Description: Listener for elastic load balancer
    Value: !Ref ElasticLoadBalancerListener

  ElasticLoadBalancer:
    Description: Elastic load balancer for application
    Value: !Ref ElasticLoadBalancer

  EC2Instance1:
    Description: First instance
    Value: !Ref EC2Instance1

  EC2Instance2:
    Description: Second instance
    Value: !Ref EC2Instance2
...
